# docker-compose.yml 파일은 Docker Compose를 사용하여 여러 Docker 컨테이너를 정의하고 실행하는 구성 파일입니다.
# 이 파일은 프로젝트의 모든 서비스를 정의하고, 각 서비스가 어떻게 상호작용하는지 설정합니다.
# 여기서는 PostgreSQL 데이터베이스, 백엔드(Django) 서버, 프론트엔드(React) 애플리케이션을 설정합니다.

version: '3.8'  # Docker Compose 파일의 버전을 지정합니다. 여기서는 버전 3.8을 사용합니다.

services:  # 이 섹션은 여러 서비스를 정의합니다.

  db:  # PostgreSQL 데이터베이스 서비스를 정의합니다.
    image: postgres:latest  # 최신 버전의 PostgreSQL 이미지를 사용합니다.
    environment:  # 데이터베이스 환경 변수를 설정합니다.
      POSTGRES_DB: pong_db  # 데이터베이스 이름을 pong_db로 설정합니다.
      POSTGRES_USER: pong_user  # 데이터베이스 사용자 이름을 pong_user로 설정합니다.
      POSTGRES_PASSWORD: pong_password  # 데이터베이스 비밀번호를 pong_password로 설정합니다.
    ports:  # 호스트와 컨테이너 간의 포트를 매핑합니다.
      - "5432:5432"  # 호스트의 포트 5432를 컨테이너의 포트 5432에 매핑합니다.
    volumes:  # 데이터베이스 데이터를 저장할 볼륨을 설정합니다.
      - transcendence-db-data:/var/lib/postgresql/data  # 호스트의 transcendence-db-data 볼륨을 컨테이너의 /var/lib/postgresql/data에 매핑합니다.
    networks:  # 이 서비스가 연결될 네트워크를 지정합니다.
      - app-network  # app-network 네트워크에 연결합니다.

  backend:  # 백엔드(Django) 서비스를 정의합니다.
    build:  # Docker 이미지를 빌드할 컨텍스트와 Dockerfile을 지정합니다.
      context: ./backend  # 백엔드 애플리케이션의 디렉토리를 컨텍스트로 지정합니다.
      dockerfile: Dockerfile  # Dockerfile의 이름을 지정합니다.
    volumes:  # 호스트와 컨테이너 간의 파일 시스템을 공유합니다.
      - ./backend:/app  # 호스트의 ./backend 디렉토리를 컨테이너의 /app 디렉토리에 매핑합니다.
    ports:  # 호스트와 컨테이너 간의 포트를 매핑합니다.
      - "8000:8000"  # 호스트의 포트 8000을 컨테이너의 포트 8000에 매핑합니다.
    depends_on:  # 이 서비스가 시작되기 전에 db 서비스가 시작되어야 함을 지정합니다.
      - db
    environment:  # 백엔드 애플리케이션의 환경 변수를 설정합니다.
      DATABASE_HOST: db  # 데이터베이스 호스트 이름을 db로 설정합니다.
      DATABASE_NAME: pong_db  # 데이터베이스 이름을 pong_db로 설정합니다.
      DATABASE_USER: pong_user  # 데이터베이스 사용자 이름을 pong_user로 설정합니다.
      DATABASE_PASSWORD: pong_password  # 데이터베이스 비밀번호를 pong_password로 설정합니다.
      DATABASE_PORT: 5432  # 데이터베이스 포트를 5432로 설정합니다.
    networks:  # 이 서비스가 연결될 네트워크를 지정합니다.
      - app-network  # app-network 네트워크에 연결합니다.

  frontend:  # 프론트엔드(React) 서비스를 정의합니다.
    build:  # Docker 이미지를 빌드할 컨텍스트와 Dockerfile을 지정합니다.
      context: ./frontend  # 프론트엔드 애플리케이션의 디렉토리를 컨텍스트로 지정합니다.
      dockerfile: Dockerfile  # Dockerfile의 이름을 지정합니다.
    ports:  # 호스트와 컨테이너 간의 포트를 매핑합니다.
      - "3000:3000"  # 호스트의 포트 3000을 컨테이너의 포트 3000에 매핑합니다.
    environment:  # 프론트엔드 애플리케이션의 환경 변수를 설정합니다.
      REACT_APP_API_URL: http://localhost:8000  # API 요청을 보낼 백엔드 서버의 URL을 설정합니다.
    networks:  # 이 서비스가 연결될 네트워크를 지정합니다.
      - app-network  # app-network 네트워크에 연결합니다.

volumes:  # 데이터베이스 데이터를 저장할 볼륨을 정의합니다.
  transcendence-db-data:  # transcendence-db-data 볼륨을 생성합니다.

networks:  # 서비스들이 연결될 네트워크를 정의합니다.
  app-network:  # app-network라는 이름의 네트워크를 생성합니다.
    driver: bridge  # 브리지 네트워크 드라이버를 사용합니다.
